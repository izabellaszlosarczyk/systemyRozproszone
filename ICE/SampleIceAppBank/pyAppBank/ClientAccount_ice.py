# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `ClientAccount.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Account
_M_Account = Ice.openModule('Account')
__name__ = 'Account'

if 'Unlogged' not in _M_Account.__dict__:
    _M_Account.Unlogged = Ice.createTempClass()
    class Unlogged(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Account::Unlogged'

    _M_Account._t_Unlogged = IcePy.defineException('::Account::Unlogged', Unlogged, (), False, None, ())
    Unlogged._ice_type = _M_Account._t_Unlogged

    _M_Account.Unlogged = Unlogged
    del Unlogged

if 'Investment' not in _M_Account.__dict__:
    _M_Account.Investment = Ice.createTempClass()
    class Investment(Ice.Object):
        def __init__(self, rate=0.0, balance=0, period=0):
            if Ice.getType(self) == _M_Account.Investment:
                raise RuntimeError('Account.Investment is an abstract class')
            self.rate = rate
            self.balance = balance
            self.period = period

        def ice_ids(self, current=None):
            return ('::Account::Investment', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Account::Investment'

        def ice_staticId():
            return '::Account::Investment'
        ice_staticId = staticmethod(ice_staticId)

        def getRate(self, current=None):
            pass

        def getBalance(self, current=None):
            pass

        def getPeriod(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Account._t_Investment)

        __repr__ = __str__

    _M_Account.InvestmentPrx = Ice.createTempClass()
    class InvestmentPrx(Ice.ObjectPrx):

        def getRate(self, _ctx=None):
            return _M_Account.Investment._op_getRate.invoke(self, ((), _ctx))

        def begin_getRate(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.Investment._op_getRate.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRate(self, _r):
            return _M_Account.Investment._op_getRate.end(self, _r)

        def getBalance(self, _ctx=None):
            return _M_Account.Investment._op_getBalance.invoke(self, ((), _ctx))

        def begin_getBalance(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.Investment._op_getBalance.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getBalance(self, _r):
            return _M_Account.Investment._op_getBalance.end(self, _r)

        def getPeriod(self, _ctx=None):
            return _M_Account.Investment._op_getPeriod.invoke(self, ((), _ctx))

        def begin_getPeriod(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.Investment._op_getPeriod.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getPeriod(self, _r):
            return _M_Account.Investment._op_getPeriod.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Account.InvestmentPrx.ice_checkedCast(proxy, '::Account::Investment', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Account.InvestmentPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Account::Investment'
        ice_staticId = staticmethod(ice_staticId)

    _M_Account._t_InvestmentPrx = IcePy.defineProxy('::Account::Investment', InvestmentPrx)

    _M_Account._t_Investment = IcePy.defineClass('::Account::Investment', Investment, -1, (), True, False, None, (), (
        ('rate', (), IcePy._t_float, False, 0),
        ('balance', (), IcePy._t_int, False, 0),
        ('period', (), IcePy._t_int, False, 0)
    ))
    Investment._ice_type = _M_Account._t_Investment

    Investment._op_getRate = IcePy.Operation('getRate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Investment._op_getBalance = IcePy.Operation('getBalance', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Investment._op_getPeriod = IcePy.Operation('getPeriod', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Account.Investment = Investment
    del Investment

    _M_Account.InvestmentPrx = InvestmentPrx
    del InvestmentPrx

if 'Loan' not in _M_Account.__dict__:
    _M_Account.Loan = Ice.createTempClass()
    class Loan(Ice.Object):
        def __init__(self, interestRate=0.0, amount=0, period=0):
            if Ice.getType(self) == _M_Account.Loan:
                raise RuntimeError('Account.Loan is an abstract class')
            self.interestRate = interestRate
            self.amount = amount
            self.period = period

        def ice_ids(self, current=None):
            return ('::Account::Loan', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Account::Loan'

        def ice_staticId():
            return '::Account::Loan'
        ice_staticId = staticmethod(ice_staticId)

        def getInterestRate(self, current=None):
            pass

        def getAmount(self, current=None):
            pass

        def getPeriod(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Account._t_Loan)

        __repr__ = __str__

    _M_Account.LoanPrx = Ice.createTempClass()
    class LoanPrx(Ice.ObjectPrx):

        def getInterestRate(self, _ctx=None):
            return _M_Account.Loan._op_getInterestRate.invoke(self, ((), _ctx))

        def begin_getInterestRate(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.Loan._op_getInterestRate.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getInterestRate(self, _r):
            return _M_Account.Loan._op_getInterestRate.end(self, _r)

        def getAmount(self, _ctx=None):
            return _M_Account.Loan._op_getAmount.invoke(self, ((), _ctx))

        def begin_getAmount(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.Loan._op_getAmount.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAmount(self, _r):
            return _M_Account.Loan._op_getAmount.end(self, _r)

        def getPeriod(self, _ctx=None):
            return _M_Account.Loan._op_getPeriod.invoke(self, ((), _ctx))

        def begin_getPeriod(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.Loan._op_getPeriod.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getPeriod(self, _r):
            return _M_Account.Loan._op_getPeriod.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Account.LoanPrx.ice_checkedCast(proxy, '::Account::Loan', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Account.LoanPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Account::Loan'
        ice_staticId = staticmethod(ice_staticId)

    _M_Account._t_LoanPrx = IcePy.defineProxy('::Account::Loan', LoanPrx)

    _M_Account._t_Loan = IcePy.defineClass('::Account::Loan', Loan, -1, (), True, False, None, (), (
        ('interestRate', (), IcePy._t_float, False, 0),
        ('amount', (), IcePy._t_int, False, 0),
        ('period', (), IcePy._t_int, False, 0)
    ))
    Loan._ice_type = _M_Account._t_Loan

    Loan._op_getInterestRate = IcePy.Operation('getInterestRate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Loan._op_getAmount = IcePy.Operation('getAmount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Loan._op_getPeriod = IcePy.Operation('getPeriod', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Account.Loan = Loan
    del Loan

    _M_Account.LoanPrx = LoanPrx
    del LoanPrx

if '_t_Investments' not in _M_Account.__dict__:
    _M_Account._t_Investments = IcePy.defineSequence('::Account::Investments', (), _M_Account._t_Investment)

if '_t_Loans' not in _M_Account.__dict__:
    _M_Account._t_Loans = IcePy.defineSequence('::Account::Loans', (), _M_Account._t_Loan)

if 'CustomerAccount' not in _M_Account.__dict__:
    _M_Account.CustomerAccount = Ice.createTempClass()
    class CustomerAccount(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Account.CustomerAccount:
                raise RuntimeError('Account.CustomerAccount is an abstract class')

        def ice_ids(self, current=None):
            return ('::Account::CustomerAccount', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Account::CustomerAccount'

        def ice_staticId():
            return '::Account::CustomerAccount'
        ice_staticId = staticmethod(ice_staticId)

        def login(self, current=None):
            pass

        def logout(self, token, current=None):
            pass

        def getInvestmentsList(self, token, current=None):
            pass

        def getLoansList(self, token, current=None):
            pass

        def calculateLoan_async(self, _cb, token, period, amount, current=None):
            pass

        def calculateInvestment_async(self, _cb, token, period, amount, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Account._t_CustomerAccount)

        __repr__ = __str__

    _M_Account.CustomerAccountPrx = Ice.createTempClass()
    class CustomerAccountPrx(Ice.ObjectPrx):

        def login(self, _ctx=None):
            return _M_Account.CustomerAccount._op_login.invoke(self, ((), _ctx))

        def begin_login(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.CustomerAccount._op_login.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_login(self, _r):
            return _M_Account.CustomerAccount._op_login.end(self, _r)

        def logout(self, token, _ctx=None):
            return _M_Account.CustomerAccount._op_logout.invoke(self, ((token, ), _ctx))

        def begin_logout(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.CustomerAccount._op_logout.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_logout(self, _r):
            return _M_Account.CustomerAccount._op_logout.end(self, _r)

        def getInvestmentsList(self, token, _ctx=None):
            return _M_Account.CustomerAccount._op_getInvestmentsList.invoke(self, ((token, ), _ctx))

        def begin_getInvestmentsList(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.CustomerAccount._op_getInvestmentsList.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_getInvestmentsList(self, _r):
            return _M_Account.CustomerAccount._op_getInvestmentsList.end(self, _r)

        def getLoansList(self, token, _ctx=None):
            return _M_Account.CustomerAccount._op_getLoansList.invoke(self, ((token, ), _ctx))

        def begin_getLoansList(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.CustomerAccount._op_getLoansList.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_getLoansList(self, _r):
            return _M_Account.CustomerAccount._op_getLoansList.end(self, _r)

        def calculateLoan(self, token, period, amount, _ctx=None):
            return _M_Account.CustomerAccount._op_calculateLoan.invoke(self, ((token, period, amount), _ctx))

        def begin_calculateLoan(self, token, period, amount, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.CustomerAccount._op_calculateLoan.begin(self, ((token, period, amount), _response, _ex, _sent, _ctx))

        def end_calculateLoan(self, _r):
            return _M_Account.CustomerAccount._op_calculateLoan.end(self, _r)

        def calculateInvestment(self, token, period, amount, _ctx=None):
            return _M_Account.CustomerAccount._op_calculateInvestment.invoke(self, ((token, period, amount), _ctx))

        def begin_calculateInvestment(self, token, period, amount, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Account.CustomerAccount._op_calculateInvestment.begin(self, ((token, period, amount), _response, _ex, _sent, _ctx))

        def end_calculateInvestment(self, _r):
            return _M_Account.CustomerAccount._op_calculateInvestment.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Account.CustomerAccountPrx.ice_checkedCast(proxy, '::Account::CustomerAccount', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Account.CustomerAccountPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Account::CustomerAccount'
        ice_staticId = staticmethod(ice_staticId)

    _M_Account._t_CustomerAccountPrx = IcePy.defineProxy('::Account::CustomerAccount', CustomerAccountPrx)

    _M_Account._t_CustomerAccount = IcePy.defineClass('::Account::CustomerAccount', CustomerAccount, -1, (), True, False, None, (), ())
    CustomerAccount._ice_type = _M_Account._t_CustomerAccount

    CustomerAccount._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    CustomerAccount._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Account._t_Unlogged,))
    CustomerAccount._op_getInvestmentsList = IcePy.Operation('getInvestmentsList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Account._t_Investments, False, 0), (_M_Account._t_Unlogged,))
    CustomerAccount._op_getLoansList = IcePy.Operation('getLoansList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Account._t_Loans, False, 0), (_M_Account._t_Unlogged,))
    CustomerAccount._op_calculateLoan = IcePy.Operation('calculateLoan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Account._t_Loan, False, 0), (_M_Account._t_Unlogged,))
    CustomerAccount._op_calculateInvestment = IcePy.Operation('calculateInvestment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Account._t_Investment, False, 0), (_M_Account._t_Unlogged,))

    _M_Account.CustomerAccount = CustomerAccount
    del CustomerAccount

    _M_Account.CustomerAccountPrx = CustomerAccountPrx
    del CustomerAccountPrx

# End of module Account
