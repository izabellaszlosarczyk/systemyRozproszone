# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `FinancialNews.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module FinancialNews
_M_FinancialNews = Ice.openModule('FinancialNews')
__name__ = 'FinancialNews'

if 'Currency' not in _M_FinancialNews.__dict__:
    _M_FinancialNews.Currency = Ice.createTempClass()
    class Currency(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Currency.PLN = Currency("PLN", 0)
    Currency.EUR = Currency("EUR", 1)
    Currency.USD = Currency("USD", 2)
    Currency.CHF = Currency("CHF", 3)
    Currency._enumerators = { 0:Currency.PLN, 1:Currency.EUR, 2:Currency.USD, 3:Currency.CHF }

    _M_FinancialNews._t_Currency = IcePy.defineEnum('::FinancialNews::Currency', Currency, (), Currency._enumerators)

    _M_FinancialNews.Currency = Currency
    del Currency

if 'FinancialNewsReceiver' not in _M_FinancialNews.__dict__:
    _M_FinancialNews.FinancialNewsReceiver = Ice.createTempClass()
    class FinancialNewsReceiver(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_FinancialNews.FinancialNewsReceiver:
                raise RuntimeError('FinancialNews.FinancialNewsReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::FinancialNews::FinancialNewsReceiver', '::Ice::Object')

        def ice_id(self, current=None):
            return '::FinancialNews::FinancialNewsReceiver'

        def ice_staticId():
            return '::FinancialNews::FinancialNewsReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def interestRate(self, rate, curr, current=None):
            pass

        def exchangeRate(self, rate, curr1, curr2, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_FinancialNews._t_FinancialNewsReceiver)

        __repr__ = __str__

    _M_FinancialNews.FinancialNewsReceiverPrx = Ice.createTempClass()
    class FinancialNewsReceiverPrx(Ice.ObjectPrx):

        def interestRate(self, rate, curr, _ctx=None):
            return _M_FinancialNews.FinancialNewsReceiver._op_interestRate.invoke(self, ((rate, curr), _ctx))

        def begin_interestRate(self, rate, curr, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FinancialNews.FinancialNewsReceiver._op_interestRate.begin(self, ((rate, curr), _response, _ex, _sent, _ctx))

        def end_interestRate(self, _r):
            return _M_FinancialNews.FinancialNewsReceiver._op_interestRate.end(self, _r)

        def exchangeRate(self, rate, curr1, curr2, _ctx=None):
            return _M_FinancialNews.FinancialNewsReceiver._op_exchangeRate.invoke(self, ((rate, curr1, curr2), _ctx))

        def begin_exchangeRate(self, rate, curr1, curr2, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FinancialNews.FinancialNewsReceiver._op_exchangeRate.begin(self, ((rate, curr1, curr2), _response, _ex, _sent, _ctx))

        def end_exchangeRate(self, _r):
            return _M_FinancialNews.FinancialNewsReceiver._op_exchangeRate.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_FinancialNews.FinancialNewsReceiverPrx.ice_checkedCast(proxy, '::FinancialNews::FinancialNewsReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_FinancialNews.FinancialNewsReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::FinancialNews::FinancialNewsReceiver'
        ice_staticId = staticmethod(ice_staticId)

    _M_FinancialNews._t_FinancialNewsReceiverPrx = IcePy.defineProxy('::FinancialNews::FinancialNewsReceiver', FinancialNewsReceiverPrx)

    _M_FinancialNews._t_FinancialNewsReceiver = IcePy.defineClass('::FinancialNews::FinancialNewsReceiver', FinancialNewsReceiver, -1, (), True, False, None, (), ())
    FinancialNewsReceiver._ice_type = _M_FinancialNews._t_FinancialNewsReceiver

    FinancialNewsReceiver._op_interestRate = IcePy.Operation('interestRate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), _M_FinancialNews._t_Currency, False, 0)), (), None, ())
    FinancialNewsReceiver._op_exchangeRate = IcePy.Operation('exchangeRate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), _M_FinancialNews._t_Currency, False, 0), ((), _M_FinancialNews._t_Currency, False, 0)), (), None, ())

    _M_FinancialNews.FinancialNewsReceiver = FinancialNewsReceiver
    del FinancialNewsReceiver

    _M_FinancialNews.FinancialNewsReceiverPrx = FinancialNewsReceiverPrx
    del FinancialNewsReceiverPrx

if 'FinancialNewsServer' not in _M_FinancialNews.__dict__:
    _M_FinancialNews.FinancialNewsServer = Ice.createTempClass()
    class FinancialNewsServer(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_FinancialNews.FinancialNewsServer:
                raise RuntimeError('FinancialNews.FinancialNewsServer is an abstract class')

        def ice_ids(self, current=None):
            return ('::FinancialNews::FinancialNewsServer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::FinancialNews::FinancialNewsServer'

        def ice_staticId():
            return '::FinancialNews::FinancialNewsServer'
        ice_staticId = staticmethod(ice_staticId)

        def registerForNews(self, subscriber, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_FinancialNews._t_FinancialNewsServer)

        __repr__ = __str__

    _M_FinancialNews.FinancialNewsServerPrx = Ice.createTempClass()
    class FinancialNewsServerPrx(Ice.ObjectPrx):

        def registerForNews(self, subscriber, _ctx=None):
            return _M_FinancialNews.FinancialNewsServer._op_registerForNews.invoke(self, ((subscriber, ), _ctx))

        def begin_registerForNews(self, subscriber, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FinancialNews.FinancialNewsServer._op_registerForNews.begin(self, ((subscriber, ), _response, _ex, _sent, _ctx))

        def end_registerForNews(self, _r):
            return _M_FinancialNews.FinancialNewsServer._op_registerForNews.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_FinancialNews.FinancialNewsServerPrx.ice_checkedCast(proxy, '::FinancialNews::FinancialNewsServer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_FinancialNews.FinancialNewsServerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::FinancialNews::FinancialNewsServer'
        ice_staticId = staticmethod(ice_staticId)

    _M_FinancialNews._t_FinancialNewsServerPrx = IcePy.defineProxy('::FinancialNews::FinancialNewsServer', FinancialNewsServerPrx)

    _M_FinancialNews._t_FinancialNewsServer = IcePy.defineClass('::FinancialNews::FinancialNewsServer', FinancialNewsServer, -1, (), True, False, None, (), ())
    FinancialNewsServer._ice_type = _M_FinancialNews._t_FinancialNewsServer

    FinancialNewsServer._op_registerForNews = IcePy.Operation('registerForNews', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_FinancialNews._t_FinancialNewsReceiverPrx, False, 0),), (), None, ())

    _M_FinancialNews.FinancialNewsServer = FinancialNewsServer
    del FinancialNewsServer

    _M_FinancialNews.FinancialNewsServerPrx = FinancialNewsServerPrx
    del FinancialNewsServerPrx

# End of module FinancialNews
